import { Clause, RiskHighlight } from '../types';

export const parseDocument = (content: string): Clause[] => {
  // Mock document parsing - in real app, this would use AI
  const sections = content.split('\n\n').filter(section => section.trim().length > 50);
  
  return sections.map((section, index) => ({
    id: `clause-${index}`,
    original: section.trim(),
    simplified: `This section explains ${section.split(' ').slice(0, 10).join(' ')}... (simplified version would be generated by AI)`,
    riskLevel: Math.random() > 0.5 ? 'medium' : 'low' as 'low' | 'medium' | 'high',
    category: ['risk', 'obligation', 'important'][Math.floor(Math.random() * 3)] as 'risk' | 'obligation' | 'important',
    section: `Section ${index + 1}`
  }));
};

export const extractRiskHighlights = (content: string): RiskHighlight[] => {
  const riskPatterns = [
    { pattern: /penalty|fee|charge/gi, type: 'risk' as const, severity: 'high' as const },
    { pattern: /increase.*rent/gi, type: 'important' as const, severity: 'medium' as const },
    { pattern: /responsible.*maintain/gi, type: 'obligation' as const, severity: 'low' as const },
  ];

  const highlights: RiskHighlight[] = [];
  
  riskPatterns.forEach(({ pattern, type, severity }) => {
    const matches = content.match(pattern);
    if (matches) {
      matches.forEach(match => {
        highlights.push({
          text: match,
          type,
          severity,
          explanation: `This term indicates a ${type} that you should be aware of.`
        });
      });
    }
  });

  return highlights;
};